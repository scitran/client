% JobAskState - Object describing the input for counting jobs that match the given query for a given state
%
% JobAskState Properties:
%    whitelist     - Properties that must match against jobs
%    blacklist     - Properties that must NOT match against jobs
%    capabilities  - A set of capabilities that must be a superset of matched jobs
%    limit        
%
% JobAskState Methods:
%    toJson - Convert the object to a Map that can be encoded to json
%    struct - Convert the object to a struct
    classdef JobAskState < flywheel.ModelBase
    % NOTE: This file is auto generated by the swagger code generator program.
    % Do not edit the file manually.
    properties (Constant)
        propertyMap = containers.Map({ 'whitelist', 'blacklist', 'capabilities', 'limit' }, ...
            { 'whitelist', 'blacklist', 'capabilities', 'limit' });
    end
    properties(Dependent)
        whitelist
        blacklist
        capabilities
        limit
    end
    methods
        function obj = JobAskState(varargin)
            obj@flywheel.ModelBase(flywheel.model.JobAskState.propertyMap);

            % Allow empty object creation
            if length(varargin)
                p = inputParser;
                addParameter(p, 'whitelist', []);
                addParameter(p, 'blacklist', []);
                addParameter(p, 'capabilities', []);
                addParameter(p, 'limit', []);

                parse(p, varargin{:});

                if ~isempty(p.Results.whitelist)
                    obj.props_('whitelist') = p.Results.whitelist;
                end
                if ~isempty(p.Results.blacklist)
                    obj.props_('blacklist') = p.Results.blacklist;
                end
                if ~isempty(p.Results.capabilities)
                    obj.props_('capabilities') = p.Results.capabilities;
                end
                if ~isempty(p.Results.limit)
                    obj.props_('limit') = p.Results.limit;
                end
            end
        end
        function result = get.whitelist(obj)
            if ismethod(obj, 'get_whitelist')
                result = obj.get_whitelist();
            else
                if isKey(obj.props_, 'whitelist')
                    result = obj.props_('whitelist');
                else
                    result = [];
                end
            end
        end
        function obj = set.whitelist(obj, value)
            obj.props_('whitelist') = value;
        end
        function result = get.blacklist(obj)
            if ismethod(obj, 'get_blacklist')
                result = obj.get_blacklist();
            else
                if isKey(obj.props_, 'blacklist')
                    result = obj.props_('blacklist');
                else
                    result = [];
                end
            end
        end
        function obj = set.blacklist(obj, value)
            obj.props_('blacklist') = value;
        end
        function result = get.capabilities(obj)
            if ismethod(obj, 'get_capabilities')
                result = obj.get_capabilities();
            else
                if isKey(obj.props_, 'capabilities')
                    result = obj.props_('capabilities');
                else
                    result = [];
                end
            end
        end
        function obj = set.capabilities(obj, value)
            obj.props_('capabilities') = value;
        end
        function result = get.limit(obj)
            if ismethod(obj, 'get_limit')
                result = obj.get_limit();
            else
                if isKey(obj.props_, 'limit')
                    result = obj.props_('limit');
                else
                    result = [];
                end
            end
        end
        function obj = set.limit(obj, value)
            obj.props_('limit') = value;
        end
        function result = toJson(obj)
            result = containers.Map;
            if isKey(obj.props_, 'whitelist')
                result('whitelist') = obj.props_('whitelist').toJson();
            end
            if isKey(obj.props_, 'blacklist')
                result('blacklist') = obj.props_('blacklist').toJson();
            end
            if isKey(obj.props_, 'capabilities')
                result('capabilities') = flywheel.ModelBase.serializeValue(obj.props_('capabilities'), 'vector[char]');
            end
            if isKey(obj.props_, 'limit')
                result('limit') = flywheel.ModelBase.serializeValue(obj.props_('limit'), 'integer');
            end
        end
        function result = struct(obj)
            result = struct;

            if isKey(obj.props_, 'whitelist')
                result.whitelist = struct(obj.props_('whitelist'));
            else
                result.whitelist = [];
            end
            if isKey(obj.props_, 'blacklist')
                result.blacklist = struct(obj.props_('blacklist'));
            else
                result.blacklist = [];
            end
            if isKey(obj.props_, 'capabilities')
                result.capabilities = obj.props_('capabilities');
            else
                result.capabilities = [];
            end
            if isKey(obj.props_, 'limit')
                result.limit = obj.props_('limit');
            else
                result.limit = [];
            end
        end
        function result = returnValue(obj)
            result = obj;
        end
    end
    methods(Access = protected)
        function prpgrp = getPropertyGroups(obj)
            if ~isscalar(obj)
                prpgrp = getPropertyGroups@matlab.mixin.CustomDisplay(obj);
            else
                propList = struct;
                if isKey(obj.props_, 'whitelist')
                    propList.whitelist = obj.props_('whitelist');
                else
                    propList.whitelist = [];
                end
                if isKey(obj.props_, 'blacklist')
                    propList.blacklist = obj.props_('blacklist');
                else
                    propList.blacklist = [];
                end
                if isKey(obj.props_, 'capabilities')
                    propList.capabilities = obj.props_('capabilities');
                else
                    propList.capabilities = [];
                end
                if isKey(obj.props_, 'limit')
                    propList.limit = obj.props_('limit');
                else
                    propList.limit = [];
                end
                prpgrp = matlab.mixin.util.PropertyGroup(propList);
            end
        end
    end
    methods(Static)
        function obj = fromJson(json, context)
            obj =  flywheel.model.JobAskState;
            if isfield(json, 'whitelist')
                obj.props_('whitelist') = flywheel.model.JobConfigInputs.fromJson(json.whitelist, context);
            end
            if isfield(json, 'blacklist')
                obj.props_('blacklist') = flywheel.model.JobConfigInputs.fromJson(json.blacklist, context);
            end
            if isfield(json, 'capabilities')
                obj.props_('capabilities') = flywheel.ModelBase.deserializeValue(json.capabilities, 'vector[char]');
            end
            if isfield(json, 'limit')
                obj.props_('limit') = flywheel.ModelBase.deserializeValue(json.limit, 'integer');
            end
            if isprop(obj, 'context_')
                obj.setContext_(context);
            end
        end
        function obj = ensureIsInstance(obj)
            if ~isempty(obj)
                % Realistically, we only convert structs
                if ~isa(obj, 'flywheel.model.JobAskState')
                    obj = flywheel.model.JobAskState(obj);
                end
                if isKey(obj.props_, 'whitelist')
                    obj.props_('whitelist') =  flywheel.model.JobConfigInputs.ensureIsInstance(obj.props_('whitelist'));
                end
                if isKey(obj.props_, 'blacklist')
                    obj.props_('blacklist') =  flywheel.model.JobConfigInputs.ensureIsInstance(obj.props_('blacklist'));
                end
                if isKey(obj.props_, 'capabilities')
                end
                if isKey(obj.props_, 'limit')
                end
            end
        end
    end
end
