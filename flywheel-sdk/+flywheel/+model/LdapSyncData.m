% LdapSyncData
%
% LdapSyncData Properties:
%    users 
%    error 
%
% LdapSyncData Methods:
%    toJson - Convert the object to a Map that can be encoded to json
%    struct - Convert the object to a struct
    classdef LdapSyncData < flywheel.ModelBase
    % NOTE: This file is auto generated by the swagger code generator program.
    % Do not edit the file manually.
    properties (Constant)
        propertyMap = containers.Map({ 'users', 'error' }, ...
            { 'users', 'error' });
    end
    properties(Dependent)
        users
        error
    end
    methods
        function obj = LdapSyncData(varargin)
            obj@flywheel.ModelBase(flywheel.model.LdapSyncData.propertyMap);

            % Allow empty object creation
            if length(varargin)
                p = inputParser;
                addParameter(p, 'users', []);
                addParameter(p, 'error', []);

                parse(p, varargin{:});

                if ~isempty(p.Results.users)
                    obj.props_('users') = p.Results.users;
                end
                if ~isempty(p.Results.error)
                    obj.props_('error') = p.Results.error;
                end
            end
        end
        function result = get.users(obj)
            if ismethod(obj, 'get_users')
                result = obj.get_users();
            else
                if isKey(obj.props_, 'users')
                    result = obj.props_('users');
                else
                    result = [];
                end
            end
        end
        function obj = set.users(obj, value)
            obj.props_('users') = value;
        end
        function result = get.error(obj)
            if ismethod(obj, 'get_error')
                result = obj.get_error();
            else
                if isKey(obj.props_, 'error')
                    result = obj.props_('error');
                else
                    result = [];
                end
            end
        end
        function obj = set.error(obj, value)
            obj.props_('error') = value;
        end
        function result = toJson(obj)
            result = containers.Map;
            if isKey(obj.props_, 'users')
                result('users') = flywheel.ModelBase.cellmap(@toJson, obj.props_('users'));
            end
            if isKey(obj.props_, 'error')
                result('error') = flywheel.ModelBase.serializeValue(obj.props_('error'), 'char');
            end
        end
        function result = struct(obj)
            result = struct;

            if isKey(obj.props_, 'users')
                result.users = flywheel.ModelBase.cellmap(@struct, obj.props_('users'));
            else
                result.users = [];
            end
            if isKey(obj.props_, 'error')
                result.error = obj.props_('error');
            else
                result.error = [];
            end
        end
        function result = returnValue(obj)
            result = obj;
        end
    end
    methods(Access = protected)
        function prpgrp = getPropertyGroups(obj)
            if ~isscalar(obj)
                prpgrp = getPropertyGroups@matlab.mixin.CustomDisplay(obj);
            else
                propList = struct;
                if isKey(obj.props_, 'users')
                    propList.users = obj.props_('users');
                else
                    propList.users = [];
                end
                if isKey(obj.props_, 'error')
                    propList.error = obj.props_('error');
                else
                    propList.error = [];
                end
                prpgrp = matlab.mixin.util.PropertyGroup(propList);
            end
        end
    end
    methods(Static)
        function obj = fromJson(json, context)
            obj =  flywheel.model.LdapSyncData;
            if isfield(json, 'users')
                obj.props_('users') = flywheel.ModelBase.cellmap(@(x) flywheel.model.LdapSyncLdapUser.fromJson(x, context), json.users);
            end
            if isfield(json, 'error')
                obj.props_('error') = flywheel.ModelBase.deserializeValue(json.error, 'char');
            end
            if isprop(obj, 'context_')
                obj.setContext_(context);
            end
        end
        function obj = ensureIsInstance(obj)
            if ~isempty(obj)
                % Realistically, we only convert structs
                if ~isa(obj, 'flywheel.model.LdapSyncData')
                    obj = flywheel.model.LdapSyncData(obj);
                end
                if isKey(obj.props_, 'users')
                    obj.props_('users') = flywheel.ModelBase.cellmap(@flywheel.model.LdapSyncLdapUser.ensureIsInstance, obj.props_('users'));
                end
                if isKey(obj.props_, 'error')
                end
            end
        end
    end
end
